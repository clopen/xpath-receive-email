declare namespace array = "http://www.w3.org/2005/xpath-functions/array";
declare namespace map = "http://www.w3.org/2005/xpath-functions/map";

(: Begin configuration options :)
(: See https://developers.google.com/gmail/api/reference/rest/v1/users.messages/list :)
let $user_id := "me"
let $max_results := 5
let $query := "is:unread"
let $page_token := ""
(: End configuration options :)

let $base64url_decode := function ($encoded) {
  let $codepoint_to_binary := function ($cp) {
    (: A-Z -> 0-25 :)
    if ($cp >= 65 and $cp <= 90) then $cp - 65
    (: a-z -> 26-51 :)
    else if ($cp >= 97 and $cp <= 122) then $cp - 71
    (: 0-9 -> 52-61 :)
    else if ($cp >= 48 and $cp <= 57) then $cp + 4
    (: - -> 62 :)
    else if ($cp = 45) then 62
    (: _ -> 63 :)
    else if ($cp = 95) then 63
    else error(QName("http://localhost", "invalid-base64-character"))
  }

  let $decode_4char_block := function ($c1, $c2, $c3, $c4) {
    (: Store concatenated binary in $buf, and the non-padding length in $binary_len. :)
    let $buf := $codepoint_to_binary($c1)
    let $binary_len := 6
    let $buf := 64 * $buf + $codepoint_to_binary($c2)
    let $binary_len := $binary_len + 6
    (: Character 3 and 4 may be padding =. :)
    let $buf := if ($c3 = 61) then 64 * $buf else 64 * $buf + $codepoint_to_binary($c3)
    let $binary_len := if ($c3 = 61) then $binary_len else $binary_len + 6
    let $buf := if ($c4 = 61) then 64 * $buf else 64 * $buf + $codepoint_to_binary($c4)
    let $binary_len := if ($c4 = 61) then $binary_len else $binary_len + 6
    (: Decode. :)
    let $decoded := [$buf idiv 65536]
    let $buf := $buf mod 65536
    let $decoded := if ($binary_len >= 16) then array:append($decoded, $buf idiv 256) else $decoded
    let $buf := $buf mod 256
    let $decoded := if ($binary_len >= 24) then array:append($decoded, $buf) else $decoded
    return codepoints-to-string($decoded)
  }

  let $input_chars := array { string-to-codepoints($encoded) }
  let $count := array:size($input_chars)
  let $nblocks := ($count + 3) idiv 4
  return string-join(
    for-each((0 to $nblocks - 1), function ($idx) {
      $decode_4char_block(
        $input_chars($idx * 4 + 1),
        $input_chars($idx * 4 + 2),
        $input_chars($idx * 4 + 3),
        $input_chars($idx * 4 + 4)
      )
    }),
    ""
  )
}

let $token := json-doc("credentials.json")("token")

let $filler := function ($char, $len) {
  string-join((1 to $len)!$char)
}

let $filled := function ($content, $char, $len) {
  let $content_len := string-length($content)
  let $left_filler_len := ($len - $content_len - 2) idiv 2
  let $left_filler_len := if ($left_filler_len < 3) then 3 else $left_filler_len
  let $right_filler_len := $len - $content_len - 2 - $left_filler_len
  let $right_filler_len := if ($right_filler_len < 3) then 3 else $right_filler_len
  return $filler($char, $left_filler_len) || " " || $content || " " || $filler($char, $right_filler_len)
}

let $get_individual_message := function ($message_id) {
  let $extract_header := function ($headers, $name) {
    array:for-each($headers, function ($header) {
      if ($header("name") = $name) then $header("value") else ()
    })
  }

  let $url := (
    "https://gmail.googleapis.com/gmail/v1/users/"
    || encode-for-uri($user_id)
    || "/messages/"
    || encode-for-uri($message_id)
    || "?access_token="
    || encode-for-uri($token)
  )
  let $response := json-doc($url)
  let $payload := $response("payload")
  let $headers := $payload("headers")
  return [
    $filler("*", 80),
    "Gmail Message-ID: " || $message_id,
    "Message-ID: " || $extract_header($headers, "Message-ID"),
    "Subject: " || $extract_header($headers, "Subject"),
    "From: " || $extract_header($headers, "From"),
    "To: " || $extract_header($headers, "To"),
    "Date: " || $extract_header($headers, "Date"),
    if (map:contains($payload, "parts"))
    then array:for-each($payload("parts"), function ($part) {
      let $mime := $part("mimeType")
      let $body := $part("body")
      let $size := $body("size")
      return [
        $filled("Part (" || $mime || ")", "-", 80),
        if (map:contains($body, "attachmentId")) then "Attachment (" || $size || " bytes) omitted"
        else if ($mime = "text/html") then "HTML (" || $size || " bytes) omitted"
        else $base64url_decode($part("body")("data"))
      ]
    })
    else [
      $filled("Body", "-", 80),
      $base64url_decode($payload("body")("data"))
    ]
  ]
}

let $get_messages := function () {
  let $url := (
    "https://gmail.googleapis.com/gmail/v1/users/"
    || encode-for-uri($user_id)
    || "/messages?access_token="
    || encode-for-uri($token)
  )
  let $url := $url || "&amp;maxResults=" || $max_results
  let $url := if ($query = "") then $url else ($url || "&amp;q=" || encode-for-uri($query))
  let $url := if ($page_token = "") then $url else ($url || "&amp;pageToken=" || encode-for-uri($page_token))
  let $response := json-doc($url)
  return [
    array:for-each($response("messages"), function ($message) {
      $get_individual_message($message("id"))
    }),
    $filler("*", 80),
    "nextPageToken: " || $response("nextPageToken")
  ]
}

return $get_messages()
